pipeline {
  agent any

  environment {
    APP_NAME           = "helloapp"
    ECR_URI            = "492422659405.dkr.ecr.ap-south-1.amazonaws.com/tf-jenkins-demo-repo"
    EC2_IP             = "13.233.132.134"
    AWS_DEFAULT_REGION = "ap-south-1"
  }

  options {
    timestamps()
    disableConcurrentBuilds()
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Unit Test') {
      steps {
        // Run Python syntax check inside a Docker container so we do not need Python on Jenkins
        sh 'docker run --rm -v "$PWD/app":/app -w /app python:3.11-slim python -m py_compile server.py'
      }
    }

    stage('Build Docker') {
      steps {
        sh 'docker build -t $APP_NAME:ci ./app'
      }
    }

    stage('Login to ECR and Push') {
      steps {
        withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-creds']]) {
          script {
            def ecrRegistry = ECR_URI.split('/')[0]
            sh """
              aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${ecrRegistry}
              docker tag ${APP_NAME}:ci ${ECR_URI}:latest
              docker push ${ECR_URI}:latest
            """
          }
        }
      }
    }

    stage('Deploy to EC2') {
      steps {
        script {
          def ecrRegistry = ECR_URI.split('/')[0]
          sshagent(credentials: ['ec2-ssh']) {
            sh """
              ssh -o StrictHostKeyChecking=no ubuntu@${EC2_IP} 'set -eux
                TOKEN=\$(aws ecr get-login-password --region ${AWS_DEFAULT_REGION})
                docker login --username AWS --password "\$TOKEN" ${ecrRegistry}
                docker pull ${ECR_URI}:latest
                docker rm -f ${APP_NAME} || true
                docker run -d -p 8080:8080 --restart unless-stopped --name ${APP_NAME} ${ECR_URI}:latest
              '
            """
          }
        }
      }
    }
  }

  post {
    success {
      echo "Deployed successfully."
    }
  }
}
